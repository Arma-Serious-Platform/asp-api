generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id        String   @id @default(uuid())
  bucket    String
  filename  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
  Squad     Squad[]
}

model User {
  id                          String            @id @default(uuid())
  avatarId                    String?
  avatar                      File?             @relation(fields: [avatarId], references: [id])
  email                       String            @unique
  nickname                    String            @unique
  password                    String
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
  abilities                   SoldierAbility[]
  squadId                     String?
  activationToken             String?
  activationTokenExpiresAt    DateTime?
  status                      UserStatus        @default(ACTIVE)
  role                        UserRole          @default(USER)
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?
  avatarUrl                   String?
  bannedUntil                 DateTime?
  missions                    Mission[]
  side                        Side?
  leadingSquad                Squad?            @relation("SquadLeader")
  squadInvites                SquadInvitation[]
  squad                       Squad?            @relation("SquadMembers", fields: [squadId], references: [id])
}

model Squad {
  id          String            @id @default(uuid())
  name        String            @unique
  leaderId    String            @unique
  sideId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  activeCount Int               @default(0)
  description String?
  tag         String            @unique
  leader      User              @relation("SquadLeader", fields: [leaderId], references: [id])
  side        Side              @relation(fields: [sideId], references: [id])
  invites     SquadInvitation[]
  members     User[]            @relation("SquadMembers")
  logoId      String?
  logo        File?             @relation(fields: [logoId], references: [id])
}

model SquadInvitation {
  id        String            @id @default(uuid())
  userId    String
  squadId   String
  status    SquadInviteStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  squad     Squad             @relation(fields: [squadId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
}

model Side {
  id        String   @id @default(uuid())
  name      String   @unique
  type      SideType @default(UNASSIGNED)
  leaderId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serverId  String?
  leader    User?    @relation(fields: [leaderId], references: [id])
  server    Server?  @relation(fields: [serverId], references: [id])
  squads    Squad[]
}

model Server {
  id        String       @id @default(uuid())
  name      String       @unique
  status    ServerStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  ip        String       @default("127.0.0.1")
  port      Int          @default(2302)
  sides     Side[]
}

model Vehicle {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mission {
  id               String       @id @default(uuid())
  name             String
  authorId         String?
  description      String
  blueforSlots     Int?
  redforSlots      Int?
  independentSlots Int?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  civilianSlots    Int?
  author           User?        @relation(fields: [authorId], references: [id])
  missionDays      MissionDay[] @relation("MissionToMissionDay")
}

model MissionDay {
  id        String    @id @default(uuid())
  name      String
  date      DateTime
  weekendId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  weekend   Weekend   @relation(fields: [weekendId], references: [id])
  missions  Mission[] @relation("MissionToMissionDay")
}

model Weekend {
  id          String       @id @default(uuid())
  name        String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  missionDays MissionDay[]
}

enum ServerStatus {
  ACTIVE
  INACTIVE
}

enum MissionStatus {
  APPROVED
  PENDING_APPROVAL
  CHANGES_REQUESTED
}

enum SideType {
  BLUE
  RED
  UNASSIGNED
}

enum UserStatus {
  ACTIVE
  INVITED
  BANNED
}

enum UserRole {
  OWNER
  TECH_ADMIN
  GAME_ADMIN
  USER
}

enum SoldierAbility {
  COMMANDER
  MEDIC
  SNIPER
  ANTI_TANK
  ANTI_AIR
  HELI_PILOT
  JET_PILOT
  TANK_CREW
  VEHICLE_CREW
}

enum SquadInviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  LEAVED
}
