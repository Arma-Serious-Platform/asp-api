generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id @default(uuid())
  email                    String           @unique
  nickname                 String           @unique
  avatarUrl                String?
  password                 String
  sideId                   String?
  abilities                SoldierAbility[]
  squadId                  String?
  role                     UserRole         @default(USER)
  missions                 Mission[]
  side                     Side?
  leadingSquad             Squad?           @relation("SquadLeader")
  squad                    Squad?           @relation("SquadMembers", fields: [squadId], references: [id])
  status                   UserStatus       @default(ACTIVE)
  activationToken          String?
  activationTokenExpiresAt DateTime?
  resetPasswordToken       String?
  resetPasswordTokenExpiresAt DateTime?
  bannedUntil              DateTime?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
}

model Squad {
  id          String   @id @default(uuid())
  name        String   @unique
  tag         String   @unique
  description String?
  activeCount Int      @default(0)
  logoUrl     String?
  sideId      String
  leaderId    String   @unique
  leader      User     @relation("SquadLeader", fields: [leaderId], references: [id])
  side        Side     @relation(fields: [sideId], references: [id])
  members     User[]   @relation("SquadMembers")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Side {
  id        String   @id @default(uuid())
  name      String   @unique
  type      SideType @default(UNASSIGNED)
  leaderId  String?  @unique
  serverId  String?
  leader    User?    @relation(fields: [leaderId], references: [id])
  server    Server?  @relation(fields: [serverId], references: [id])
  squads    Squad[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id        String       @id @default(uuid())
  name      String       @unique
  ip        String       @default("127.0.0.1")
  port      Int          @default(2302)
  status    ServerStatus @default(ACTIVE)
  sides     Side[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Vehicle {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mission {
  id               String       @id @default(uuid())
  name             String
  authorId         String?
  description      String
  blueforSlots     Int?
  redforSlots      Int?
  independentSlots Int?
  civilianSlots    Int?
  author           User?        @relation(fields: [authorId], references: [id])
  missionDays      MissionDay[] @relation("MissionToMissionDay")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model MissionDay {
  id        String    @id @default(uuid())
  name      String
  date      DateTime
  weekendId String
  weekend   Weekend   @relation(fields: [weekendId], references: [id])
  missions  Mission[] @relation("MissionToMissionDay")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Weekend {
  id          String       @id @default(uuid())
  name        String
  description String
  missionDays MissionDay[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum ServerStatus {
  ACTIVE
  INACTIVE
}

enum MissionStatus {
  APPROVED
  PENDING_APPROVAL
  CHANGES_REQUESTED
}

enum SideType {
  BLUE
  RED
  UNASSIGNED
}

enum UserStatus {
  ACTIVE
  INVITED
  BANNED
}

enum UserRole {
  OWNER
  TECH_ADMIN
  GAME_ADMIN
  USER
}

enum SoldierAbility {
  COMMANDER
  MEDIC
  SNIPER
  ANTI_TANK
  ANTI_AIR
  HELI_PILOT
  JET_PILOT
  TANK_CREW
  VEHICLE_CREW
}
