// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(uuid())
  email        String           @unique
  nickname     String           @unique
  role         UserRole         @default(USER)
  password     String
  sideId       String?
  side         Side?
  abilities    SoldierAbility[]
  squadId      String?
  squad        Squad?           @relation("SquadMembers", fields: [squadId], references: [id])
  leadingSquad Squad?           @relation("SquadLeader")
  missions     Mission[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Squad {
  id        String   @id @default(uuid())
  name      String
  leader    User     @relation("SquadLeader", fields: [leaderId], references: [id])
  leaderId  String   @unique
  side      Side     @relation(fields: [sideId], references: [id])
  sideId    String
  members   User[]   @relation("SquadMembers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Side {
  id        String   @id @default(uuid())
  name      String   @unique
  type      SideType @default(UNASSIGNED)
  squads    Squad[]
  leader    User?    @relation(fields: [leaderId], references: [id])
  leaderId  String?  @unique
  server    Server?  @relation(fields: [serverId], references: [id])
  serverId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id        String       @id @default(uuid())
  name      String
  sides     Side[]
  status    ServerStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Vehicle {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mission {
  id               String       @id @default(uuid())
  name             String
  author           User?        @relation(fields: [authorId], references: [id])
  authorId         String?
  description      String
  blueforSlots     Int?
  redforSlots      Int?
  independentSlots Int?
  civilianSlots    Int?
  missionDays      MissionDay[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model MissionDay {
  id        String    @id @default(uuid())
  name      String
  missions  Mission[]
  date      DateTime
  weekend   Weekend   @relation(fields: [weekendId], references: [id])
  weekendId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Weekend {
  id          String       @id @default(uuid())
  name        String
  missionDays MissionDay[]
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

/**
 * Enums
 */

enum ServerStatus {
  ACTIVE
  INACTIVE
}

enum MissionStatus {
  APPROVED
  PENDING_APPROVAL
  CHANGES_REQUESTED
}

enum SideType {
  BLUE
  RED
  UNASSIGNED
}

enum UserStatus {
  ACTIVE
  INVITED
  BANNED
}

enum UserRole {
  OWNER
  TECH_ADMIN
  GAME_ADMIN
  USER
}

enum SoldierAbility {
  COMMANDER
  MEDIC
  SNIPER
  ANTI_TANK
  ANTI_AIR
  HELI_PILOT
  JET_PILOT
  TANK_CREW
  VEHICLE_CREW
}
